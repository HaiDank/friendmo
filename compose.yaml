# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  backend:
    build:
      context: .
    ports: 
      - 5000:5000
    restart: always
    networks:
      - friendmo
    depends_on:
      - mongo
    environment:
      - JWT_SECRET=wahwahwah
      - MONGODB_URL=mongodb://mongo:27017/friendmo?replicaSet=rs0
  mongo:
    image: mongo:8.0
    container_name: mongo
    hostname: mongo
    restart: always
    command: ["--replSet", "rs0"]
    ports:
      - 27017:27017
    networks:
      - friendmo
    healthcheck:
      test: mongosh --eval "try { rs.status().ok || rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) } catch(e) { print(e); rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" --quiet
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
volumes:
  mongo_data:
networks:
  friendmo:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

